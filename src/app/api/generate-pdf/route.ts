import { NextResponse } from 'next/server'
import puppeteer from 'puppeteer'

export async function POST(req: Request) {
  try {
    const data = await req.json()
    if (!data.html || !data.jobTitle) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 })
    }

    // Add styles for PDF
    const styledHtml = `
      <html>
        <head>
          <style>
            body {
              font-family: system-ui, -apple-system, sans-serif;
              line-height: 1.5;
              color: #111827;
              padding: 0;
              margin: 0;
            }
            h1, h2, h3 { 
              color: #111827;
              margin-top: 1.5em;
              margin-bottom: 0.5em;
            }
            p { margin: 0.5em 0; }
            .score-circle {
              width: 100px;
              height: 100px;
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              margin: 1em auto;
              font-size: 24px;
              font-weight: bold;
              color: white;
            }
            .section {
              margin: 1.5em 0;
              page-break-inside: avoid;
            }
            .header {
              text-align: center;
              margin-bottom: 2em;
              padding-top: 1em;
            }
            .footer {
              text-align: center;
              font-size: 0.8em;
              color: #6B7280;
              margin-top: 2em;
              padding-bottom: 1em;
            }
          </style>
        </head>
        <body>
          ${data.html}
          <div class="footer">
            Generated by Reskilly - AI Job Impact Analysis
            <br>
            ${new Date().toLocaleDateString()}
          </div>
        </body>
      </html>
    `
    
    // Launch browser
    const browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    })
    
    // Create new page
    const page = await browser.newPage()
    
    // Set content with timeout
    try {
      await page.setContent(styledHtml, {
        waitUntil: ['load', 'networkidle0'],
        timeout: 10000
      })
    } catch (error) {
      console.error('Timeout setting content:', error)
      await browser.close()
      throw new Error('Timeout setting PDF content')
    }
    
    // Generate PDF
    const pdf = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      },
      displayHeaderFooter: false,
      preferCSSPageSize: true
    })
    
    // Close browser
    await browser.close()
    
    // Return PDF as response
    return new NextResponse(pdf, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename=${encodeURIComponent(data.jobTitle.replace(/[^a-zA-Z0-9]/g, '_'))}_AI_Impact_Analysis.pdf`
      }
    })
  } catch (error) {
    console.error('Error generating PDF:', error)
    return NextResponse.json({ 
      error: error instanceof Error ? error.message : 'Failed to generate PDF'
    }, { status: 500 })
  }
}